#!/usr/bin/env python
# coding: utf-8

# In[1]:


#MILESTONE PROJECT ONE


# In[2]:


# How to display information


# In[3]:


print([1,2,3])


# In[4]:


print([1,2,3])
print([4,5,6])
print([7,8,9])


# In[13]:


def display(row1,row2,row3):
    print(row1)
    print(row2)
    print(row3)


# In[5]:


row1 = [' ',' ',' ']
row2 = [' ',' ',' ']
row3 = [' ',' ',' ']

display(row1,row2,row3)


# In[6]:


display(row1,row2,row3)


# In[7]:


row2[1] = 'X'


# In[8]:


display(row1,row2,row3)


# In[9]:


#accepting User input


# In[11]:


input('please enter a value: ')


# In[12]:


#input function always returns a string value
result  = input('please enter a value: ')


# In[13]:


result


# In[14]:


#input is currently seen as a string
type(result)


# In[15]:


# converting string into integer
result = input('Enter Value: ')


# In[16]:


result_int = int(result)


# In[17]:


type(result_int)


# In[18]:


type(2.3)


# In[19]:


float('3.14')


# In[20]:


position_index = int(input("choose an index position: "))


# In[21]:


type(position_index)


# In[22]:


row2[position_index]


# In[23]:


#Validating User Input

# How to check if string input is a number? - https://stackoverflow.com/questions/5424716/how-to-check-if-string-input-is-a-number
# How can I check if a string represents an int, without using try/except? - https://stackoverflow.com/questions/1265665/how-can-i-check-if-a-string-represents-an-int-without-using-try-except
#


# In[27]:


def user_choice():
    choice = input('Please enter a number (0 -10): ')
    
    return int(choice)


# In[28]:


user_choice()


# In[1]:


def user_choice():
    
    choice = 'WRONG'
    
    # continuously checks the user input until 
    while choice.isdigit() == False:
        
        choice = input('Please enter a number (0 -10): ')
        
        if choice.isdigit() == False:
            print('Sorry that is not a digit!!')
    return int(choice)


# In[2]:


user_choice()


# In[3]:


result = 'WRONG VALUE'


# In[4]:


acceptable_values = [0,1,2]


# In[5]:


result in acceptable_values


# In[6]:


result not in acceptable_values


# In[3]:


def user_choice():
    
    #Variables
    
    # initial 
    
    choice = 'WRONG'
    acceptable_range = range(0,10)
    within_range = False
    
    #two conditions to check
    #Digit check or within_range == false, ie falls within 0 and 10
    # continuously checks the user input until 
    while choice.isdigit() == False or within_range == False:
        
        choice = input('Please enter a number (0 -10): ')
        
        #digit check (correct data type)
        
        if choice.isdigit() == False:
            print('Sorry that is not a digit!!')
            
        #range check (if it is an acceptable value)
        if choice.isdigit() == True:
            if int(choice) in acceptable_range:
                within_range = True
            else:
                print("Sorry you are out of acceptable range of 0 and 10!!! ")
                within_range = False
        
    return int(choice)


# In[4]:


user_choice()


# In[5]:


# Simple User Interaction


# In[4]:


game_list = [0,1,2]


# In[5]:


def display_game(game_list):
    print("Here is the current list: ")
    print(game_list)


# In[6]:


display_game(game_list)


# In[7]:


def position_choice():
    
    choice = 'wrong'
    
    while choice not in ['0','1','2']:
        
        choice = input('Pick a position (0,1,2): ')
        
        #can only choose 0 1 or 2. No other number is accepted here.
        if choice not in ['0','1','2']:
            print('Sorry, invalid choice! ')
    
    return int(choice)


# In[8]:


position_choice()


# In[9]:


def replacement_choice(game_list,position):
    
    user_placement = input("type a string to place at position: ")
    
    game_list[position] = user_placement
    
    return game_list


# In[10]:


replacement_choice(game_list,1)


# In[11]:


def gameon_choice():
    
    choice = 'wrong'
    
    while choice not in ['Y','N','y','n']:
        
        choice = input('Keep Playing? (Y or N) ')
        
        #can only choose Y or N (upper or lower case). No other number is accepted here.
        if choice not in ['Y','N','y','n']:
            print('Sorry, I dont understand, please choose Y or N')
    
    if choice == 'Y' or choice == 'y':
        return True
    else:
        return False


# In[12]:


gameon_choice()


# In[13]:


game_on = True
game_list = [0,1,2]

while game_on:
    
    display_game(game_list)
    
    position = position_choice()
    
    game_list = replacement_choice(game_list,position)
    
    display_game(game_list)
    
    game_on = gameon_choice()


# In[5]:


# Milestone Project 1: Walkthrough Steps WorkbookÂ¶ 


# In[1]:


#Step 1: Write a function that can print out a board. Set up your board as a list, 
#where each index 1-9 corresponds with a number on a number pad, so you get a 3 by 3 board representation.

from IPython.display import clear_output

def display_board(board):
    clear_output()
    print(board[1]+'|'+board[2]+'|'+board[3])
    print('-----')
    print(board[4]+'|'+board[5]+'|'+board[6])
    print('-----')
    print(board[7]+'|'+board[8]+'|'+board[9])


# In[2]:


#test_board = [' ']*10
test_board = ['#','X','O','X','O','X','O','X','O','X']
display_board(test_board)


# In[3]:


#Step 2: Write a function that can take in a player input and assign their marker as 'X' or 'O'. 
#Think about using while loops to continually ask until you get a correct answer.


def player_input():
    
    marker = ''
   
    # continuously ask player1 to choose X or O 
    while marker != 'X' and marker != 'O':    
        marker = input('Please pick a marker X or O: ').upper()
    
    player1 = marker
    
    if player1 == 'X':
        player2 = 'O'
    else:
        player2 = 'X'
    
    return (player1,player2)


# In[4]:


player1_marker , player2_marker = player_input()


# In[5]:


player1_marker


# In[6]:


# Step 3: Write a function that takes in the board list object, a marker ('X' or 'O'), and a desired position (number 1-9) and assigns it to the board.

def place_marker(board, marker, position):
    
    board[position] = marker
    


# In[7]:


place_marker(test_board,'$',8)
display_board(test_board)


# In[8]:


# Step 4: Write a function that takes in a board and a mark (X or O) and then checks to see if that mark has won.


def win_check(board, mark):
    
    #how to win tic tac toe?
    # All rows and check to see if they all share the same marker?
    
    return ((board[1] == mark  and board[2] == mark and board[3] == mark) or 
    (board[4] == mark  and board[5] == mark and board[6] == mark) or 
    (board[7] == mark  and board[8] == mark and board[9] == mark) or

    
    #all columns, check to see if markers match
    
    (board[1] == mark  and board[4] == mark and board[4] == mark) or 
    (board[2] == mark  and board[5] == mark and board[8] == mark) or 
    (board[3] == mark  and board[6] == mark and board[9] == mark) or
    
    
    # 2 diaginals check to match.
    
    (board[1] == mark  and board[5] == mark and board[9] == mark) or 
    (board[3] == mark  and board[5] == mark and board[7] == mark)) 
    


# In[9]:


display_board(test_board)
win_check(test_board,'X')


# In[10]:


#Step 5: Write a function that uses the random module to randomly decide which player goes first. 
# You may want to lookup random.randint() Return a string of which player went first.

import random

def choose_first():
    
    #decide between two numbers like heads or tails 
    flip = random.randint(0, 1)
    
    if flip == 0:
        return 'Player 1'
    else:
        return 'Player 2'
    


# In[11]:


choose_first()


# In[12]:


#Step 6: Write a function that returns a boolean indicating whether a space on the board is freely available.

def space_check(board, position):
    
    return board[position] == ' '


# In[13]:


# Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.

def full_board_check(board):
    
    for i in range(1,10):
        if space_check(board,i):
            return False
    
    #board is full if we return true
    return True


# In[14]:


#Step 8: Write a function that asks for a player's next position (as a number 1-9) and 
#then uses the function from step 6 to check if it's a free position. If it is, then return the position for later use.

def player_choice(board):
    
    position = 0
    
    #Only accept values 1-9, and check if their is an empty position
    
    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board,position):
        position = int(input('Choose a position: (1-9) '))
        
    return position


# In[15]:


#Step 9: Write a function that asks the player if they want to play again and returns a boolean True if they do want to play again.

def replay():
    
    choice = input('Keep Playing? Yes or No ')
   
    return choice == 'Yes'


# In[16]:


# Step 10: Here comes the hard part! Use while loops and the functions you've made to run the game!
print('Welcome to Tic Tac Toe!')

while True:
    
    
    #PLAY THE GAME
    
    # Set the game up (board, whos first, choose markers X,O)
    the_board = [' ']*10
    player1_marker,player2_marker = player_input()
    
    #decides who goes first, either 
    turn = choose_first()
    
    print(turn + ' will go first')
    
    play_game = input('Ready to play? y or n')
    
    if play_game =='y':
        game_on = True
    else:
        game_on = False
        
    #game play
    
    while game_on:
        #Player 1 Turn
        if turn == 'Player 1':
            #show the board
            display_board(the_board)
            # choose a position
            position = player_choice(the_board)
            #place the marker on the position
            place_marker(the_board,player1_marker,position)
            #check if they won, if it returns true:
            if win_check(the_board,player1_marker):
                display_board(the_board)
                print('PLAYER 1 HAS WON!!!')
                game_on = False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print('Tie Game')
                    break
                else:
                    turn = 'Player 2'
            #or check if there is a tie
            
            #no tie and no win? then next players turn   
            
            
            
       # Player2's turn.
        else:
            display_board(the_board)
            # choose a position
            position = player_choice(the_board)
            #place the marker on the position
            place_marker(the_board,player2_marker,position)
            #check if they won, if it returns true:
            if win_check(the_board,player2_marker):
                display_board(the_board)
                print('PLAYER 2 HAS WON!!!')
                game_on = False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print('Tie Game')
                    break
                else:
                    turn = 'Player 1'
            
            
            
            #pass

    if not replay():
        break


# In[ ]:





# In[ ]:




